// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/orchestration.proto

package orchestration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrchestrationService_RegisterAgent_FullMethodName        = "/orchestration.OrchestrationService/RegisterAgent"
	OrchestrationService_PullWork_FullMethodName             = "/orchestration.OrchestrationService/PullWork"
	OrchestrationService_ReportResult_FullMethodName         = "/orchestration.OrchestrationService/ReportResult"
	OrchestrationService_Heartbeat_FullMethodName            = "/orchestration.OrchestrationService/Heartbeat"
	OrchestrationService_UnregisterAgent_FullMethodName      = "/orchestration.OrchestrationService/UnregisterAgent"
	OrchestrationService_OpenConversation_FullMethodName     = "/orchestration.OrchestrationService/OpenConversation"
	OrchestrationService_RequestClarification_FullMethodName = "/orchestration.OrchestrationService/RequestClarification"
	OrchestrationService_SendMessage_FullMethodName          = "/orchestration.OrchestrationService/SendMessage"
)

// OrchestrationServiceClient is the client API for OrchestrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OrchestrationService defines the gRPC interface for agent-orchestrator communication
type OrchestrationServiceClient interface {
	// Current work-based methods
	RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error)
	PullWork(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PullWorkRequest, PullWorkResponse], error)
	ReportResult(ctx context.Context, in *ReportResultRequest, opts ...grpc.CallOption) (*ReportResultResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	UnregisterAgent(ctx context.Context, in *UnregisterAgentRequest, opts ...grpc.CallOption) (*UnregisterAgentResponse, error)
	// NEW: AI-native conversational methods
	OpenConversation(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ConversationMessage, ConversationMessage], error)
	RequestClarification(ctx context.Context, in *ClarificationRequest, opts ...grpc.CallOption) (*ClarificationResponse, error)
	SendMessage(ctx context.Context, in *AgentMessage, opts ...grpc.CallOption) (*MessageResponse, error)
}

type orchestrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestrationServiceClient(cc grpc.ClientConnInterface) OrchestrationServiceClient {
	return &orchestrationServiceClient{cc}
}

func (c *orchestrationServiceClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterAgentResponse)
	err := c.cc.Invoke(ctx, OrchestrationService_RegisterAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationServiceClient) PullWork(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PullWorkRequest, PullWorkResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OrchestrationService_ServiceDesc.Streams[0], OrchestrationService_PullWork_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullWorkRequest, PullWorkResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrchestrationService_PullWorkClient = grpc.BidiStreamingClient[PullWorkRequest, PullWorkResponse]

func (c *orchestrationServiceClient) ReportResult(ctx context.Context, in *ReportResultRequest, opts ...grpc.CallOption) (*ReportResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportResultResponse)
	err := c.cc.Invoke(ctx, OrchestrationService_ReportResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, OrchestrationService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationServiceClient) UnregisterAgent(ctx context.Context, in *UnregisterAgentRequest, opts ...grpc.CallOption) (*UnregisterAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterAgentResponse)
	err := c.cc.Invoke(ctx, OrchestrationService_UnregisterAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationServiceClient) OpenConversation(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ConversationMessage, ConversationMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OrchestrationService_ServiceDesc.Streams[1], OrchestrationService_OpenConversation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConversationMessage, ConversationMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrchestrationService_OpenConversationClient = grpc.BidiStreamingClient[ConversationMessage, ConversationMessage]

func (c *orchestrationServiceClient) RequestClarification(ctx context.Context, in *ClarificationRequest, opts ...grpc.CallOption) (*ClarificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClarificationResponse)
	err := c.cc.Invoke(ctx, OrchestrationService_RequestClarification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationServiceClient) SendMessage(ctx context.Context, in *AgentMessage, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, OrchestrationService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestrationServiceServer is the server API for OrchestrationService service.
// All implementations must embed UnimplementedOrchestrationServiceServer
// for forward compatibility.
//
// OrchestrationService defines the gRPC interface for agent-orchestrator communication
type OrchestrationServiceServer interface {
	// Current work-based methods
	RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error)
	PullWork(grpc.BidiStreamingServer[PullWorkRequest, PullWorkResponse]) error
	ReportResult(context.Context, *ReportResultRequest) (*ReportResultResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	UnregisterAgent(context.Context, *UnregisterAgentRequest) (*UnregisterAgentResponse, error)
	// NEW: AI-native conversational methods
	OpenConversation(grpc.BidiStreamingServer[ConversationMessage, ConversationMessage]) error
	RequestClarification(context.Context, *ClarificationRequest) (*ClarificationResponse, error)
	SendMessage(context.Context, *AgentMessage) (*MessageResponse, error)
	mustEmbedUnimplementedOrchestrationServiceServer()
}

// UnimplementedOrchestrationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrchestrationServiceServer struct{}

func (UnimplementedOrchestrationServiceServer) RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedOrchestrationServiceServer) PullWork(grpc.BidiStreamingServer[PullWorkRequest, PullWorkResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullWork not implemented")
}
func (UnimplementedOrchestrationServiceServer) ReportResult(context.Context, *ReportResultRequest) (*ReportResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportResult not implemented")
}
func (UnimplementedOrchestrationServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedOrchestrationServiceServer) UnregisterAgent(context.Context, *UnregisterAgentRequest) (*UnregisterAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterAgent not implemented")
}
func (UnimplementedOrchestrationServiceServer) OpenConversation(grpc.BidiStreamingServer[ConversationMessage, ConversationMessage]) error {
	return status.Errorf(codes.Unimplemented, "method OpenConversation not implemented")
}
func (UnimplementedOrchestrationServiceServer) RequestClarification(context.Context, *ClarificationRequest) (*ClarificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestClarification not implemented")
}
func (UnimplementedOrchestrationServiceServer) SendMessage(context.Context, *AgentMessage) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedOrchestrationServiceServer) mustEmbedUnimplementedOrchestrationServiceServer() {}
func (UnimplementedOrchestrationServiceServer) testEmbeddedByValue()                              {}

// UnsafeOrchestrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestrationServiceServer will
// result in compilation errors.
type UnsafeOrchestrationServiceServer interface {
	mustEmbedUnimplementedOrchestrationServiceServer()
}

func RegisterOrchestrationServiceServer(s grpc.ServiceRegistrar, srv OrchestrationServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrchestrationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrchestrationService_ServiceDesc, srv)
}

func _OrchestrationService_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServiceServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestrationService_RegisterAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServiceServer).RegisterAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestrationService_PullWork_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrchestrationServiceServer).PullWork(&grpc.GenericServerStream[PullWorkRequest, PullWorkResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrchestrationService_PullWorkServer = grpc.BidiStreamingServer[PullWorkRequest, PullWorkResponse]

func _OrchestrationService_ReportResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServiceServer).ReportResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestrationService_ReportResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServiceServer).ReportResult(ctx, req.(*ReportResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestrationService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestrationService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestrationService_UnregisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServiceServer).UnregisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestrationService_UnregisterAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServiceServer).UnregisterAgent(ctx, req.(*UnregisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestrationService_OpenConversation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrchestrationServiceServer).OpenConversation(&grpc.GenericServerStream[ConversationMessage, ConversationMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrchestrationService_OpenConversationServer = grpc.BidiStreamingServer[ConversationMessage, ConversationMessage]

func _OrchestrationService_RequestClarification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClarificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServiceServer).RequestClarification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestrationService_RequestClarification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServiceServer).RequestClarification(ctx, req.(*ClarificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestrationService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestrationService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServiceServer).SendMessage(ctx, req.(*AgentMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchestrationService_ServiceDesc is the grpc.ServiceDesc for OrchestrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchestrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orchestration.OrchestrationService",
	HandlerType: (*OrchestrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _OrchestrationService_RegisterAgent_Handler,
		},
		{
			MethodName: "ReportResult",
			Handler:    _OrchestrationService_ReportResult_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _OrchestrationService_Heartbeat_Handler,
		},
		{
			MethodName: "UnregisterAgent",
			Handler:    _OrchestrationService_UnregisterAgent_Handler,
		},
		{
			MethodName: "RequestClarification",
			Handler:    _OrchestrationService_RequestClarification_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _OrchestrationService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullWork",
			Handler:       _OrchestrationService_PullWork_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OpenConversation",
			Handler:       _OrchestrationService_OpenConversation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/orchestration.proto",
}
