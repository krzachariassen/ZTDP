package ai

import (
	"context"
	"time"
)

// *** CORE AI-NATIVE TYPES ***

// Intent represents a recognized user intent with parameters and confidence
type Intent struct {
	Type       string                 `json:"type"`       // deployment, policy_check, analysis, troubleshooting, question
	Confidence float64                `json:"confidence"` // 0.0 to 1.0
	Parameters map[string]interface{} `json:"parameters"` // extracted parameters (app, environment, etc.)
	Query      string                 `json:"query"`      // original user query
	Reasoning  string                 `json:"reasoning"`  // why this intent was chosen
}

// Action represents an action taken by the platform in response to user intent
type Action struct {
	Type   string      `json:"type"`   // type of action performed
	Result interface{} `json:"result"` // result of the action
	Status string      `json:"status"` // completed, failed, in_progress
	Error  string      `json:"error,omitempty"`
}

// ConversationalResponse represents the AI's conversational response to user queries
type ConversationalResponse struct {
	Message   string          `json:"message"`   // main conversational response
	Intent    string          `json:"intent"`    // detected intent type
	Actions   []Action        `json:"actions"`   // actions performed
	Insights  []string        `json:"insights"`  // key insights provided
	Timestamp context.Context `json:"timestamp"` // response timestamp
}

// PlatformContext contains comprehensive platform state for AI reasoning
type PlatformContext struct {
	Applications map[string]interface{}   `json:"applications"`
	Services     map[string]interface{}   `json:"services"`
	Dependencies map[string]interface{}   `json:"dependencies"`
	Policies     map[string]interface{}   `json:"policies"`
	Environments map[string]interface{}   `json:"environments"`
	Health       map[string]interface{}   `json:"health"`
	RecentEvents []map[string]interface{} `json:"recent_events"`
	ContextHint  string                   `json:"context_hint"`
	Timestamp    time.Time                `json:"timestamp"`
}

// *** DEPLOYMENT-RELATED TYPES ***

// DeploymentPlan represents a deployment plan generated by domain services
type DeploymentPlan struct {
	ID            string                 `json:"id"`
	Application   string                 `json:"application"`
	Environment   string                 `json:"environment"`
	Steps         []DeploymentStep       `json:"steps"`
	EstimatedTime string                 `json:"estimated_time"`
	Metadata      map[string]interface{} `json:"metadata"`
}

// DeploymentStep represents a single step in a deployment plan
type DeploymentStep struct {
	ID           string                 `json:"id"`
	Type         string                 `json:"type"`
	Description  string                 `json:"description"`
	Command      string                 `json:"command,omitempty"`
	Dependencies []string               `json:"dependencies,omitempty"`
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
}

// ProposedChange represents a proposed change for impact prediction
type ProposedChange struct {
	Type        string                 `json:"type"`        // create, update, delete
	Target      string                 `json:"target"`      // what is being changed
	Description string                 `json:"description"` // description of the change
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

// ImpactPrediction represents AI-generated impact prediction
type ImpactPrediction struct {
	OverallRisk       string                 `json:"overall_risk"`       // Low, Medium, High, Critical
	Confidence        float64                `json:"confidence"`         // 0.0 to 1.0
	AffectedSystems   []string               `json:"affected_systems"`   // systems that will be affected
	RiskFactors       []string               `json:"risk_factors"`       // identified risk factors
	Recommendations   []string               `json:"recommendations"`    // recommended mitigations
	EstimatedDowntime string                 `json:"estimated_downtime"` // estimated downtime
	RollbackPlan      string                 `json:"rollback_plan"`      // rollback strategy
	MonitoringPoints  []string               `json:"monitoring_points"`  // what to monitor
	Timeline          []TimelineEvent        `json:"timeline"`           // predicted timeline
	Metadata          map[string]interface{} `json:"metadata"`
}

// TimelineEvent represents an event in a predicted timeline
type TimelineEvent struct {
	Time        time.Time `json:"time"`        // when this event is expected
	Event       string    `json:"event"`       // what event will occur
	Probability float64   `json:"probability"` // probability of this event (0.0 to 1.0)
}

// *** TROUBLESHOOTING TYPES ***

// TroubleshootingResponse represents AI-generated troubleshooting analysis
type TroubleshootingResponse struct {
	RootCause          string                 `json:"root_cause"`          // most likely root cause
	Confidence         float64                `json:"confidence"`          // confidence in diagnosis (0.0 to 1.0)
	Symptoms           []string               `json:"symptoms"`            // identified symptoms
	Diagnosis          string                 `json:"diagnosis"`           // detailed diagnosis
	Recommendations    []string               `json:"recommendations"`     // recommended actions
	NextSteps          []string               `json:"next_steps"`          // immediate next steps
	EstimatedTime      string                 `json:"estimated_time"`      // estimated resolution time
	Severity           string                 `json:"severity"`            // Low, Medium, High, Critical
	AffectedComponents []string               `json:"affected_components"` // components affected by the issue
	Timeline           []EventTimestamp       `json:"timeline"`            // incident timeline
	Metadata           map[string]interface{} `json:"metadata"`
}

// EventTimestamp represents a timestamped event in troubleshooting
type EventTimestamp struct {
	Timestamp string `json:"timestamp"` // ISO 8601 timestamp
	Event     string `json:"event"`     // event description
	Source    string `json:"source"`    // event source
	Severity  string `json:"severity"`  // event severity
}

// LogEntry represents a log entry for troubleshooting context
type LogEntry struct {
	Timestamp string `json:"timestamp"` // log timestamp
	Level     string `json:"level"`     // log level (INFO, WARN, ERROR)
	Message   string `json:"message"`   // log message
	Source    string `json:"source"`    // log source
}

// IncidentContext represents comprehensive incident information for AI analysis
type IncidentContext struct {
	IncidentID  string                 `json:"incident_id"` // unique incident identifier
	Description string                 `json:"description"` // incident description
	Symptoms    []string               `json:"symptoms"`    // reported symptoms
	Environment string                 `json:"environment"` // affected environment
	Timeline    []EventTimestamp       `json:"timeline"`    // incident timeline
	Logs        []LogEntry             `json:"logs"`        // relevant log entries
	Metrics     map[string]interface{} `json:"metrics"`     // current metrics
	Context     map[string]interface{} `json:"context"`     // additional context
	Metadata    map[string]interface{} `json:"metadata"`
}

// *** OPTIMIZATION TYPES ***

// OptimizationRecommendations represents AI-generated optimization recommendations
type OptimizationRecommendations struct {
	Recommendations []Recommendation       `json:"recommendations"`  // specific recommendations
	Patterns        []string               `json:"patterns"`         // detected patterns
	Confidence      float64                `json:"confidence"`       // confidence in recommendations (0.0 to 1.0)
	EstimatedImpact string                 `json:"estimated_impact"` // estimated impact description
	Priority        string                 `json:"priority"`         // overall priority (Low, Medium, High)
	Timeline        string                 `json:"timeline"`         // estimated implementation timeline
	Resources       []string               `json:"resources"`        // required resources
	RiskLevel       string                 `json:"risk_level"`       // implementation risk level
	Validation      []string               `json:"validation"`       // validation steps
	Metadata        map[string]interface{} `json:"metadata"`
}

// Recommendation represents a specific optimization recommendation
type Recommendation struct {
	Title       string   `json:"title"`       // recommendation title
	Description string   `json:"description"` // detailed description
	Impact      string   `json:"impact"`      // expected impact (Low, Medium, High)
	Effort      string   `json:"effort"`      // implementation effort (Low, Medium, High)
	Priority    string   `json:"priority"`    // priority level (Low, Medium, High)
	Category    string   `json:"category"`    // recommendation category
	Steps       []string `json:"steps"`       // implementation steps
	Risks       []string `json:"risks"`       // potential risks
	Benefits    []string `json:"benefits"`    // expected benefits
	Timeline    string   `json:"timeline"`    // estimated timeline
}

// OptimizationScope represents the scope for optimization analysis
type OptimizationScope struct {
	Target      string                 `json:"target"`      // optimization target
	Focus       []string               `json:"focus"`       // focus areas
	Timeframe   string                 `json:"timeframe"`   // analysis timeframe
	Constraints []string               `json:"constraints"` // optimization constraints
	Metadata    map[string]interface{} `json:"metadata"`
}

// *** LEARNING TYPES ***

// LearningInsights represents insights learned from deployment outcomes
type LearningInsights struct {
	Insights    []string               `json:"insights"`    // key insights learned
	Patterns    []string               `json:"patterns"`    // identified patterns
	Confidence  float64                `json:"confidence"`  // confidence in insights (0.0 to 1.0)
	Actionable  bool                   `json:"actionable"`  // whether insights are actionable
	Impact      string                 `json:"impact"`      // impact level (Low, Medium, High)
	Categories  []string               `json:"categories"`  // insight categories
	Trends      []string               `json:"trends"`      // identified trends
	Predictions []string               `json:"predictions"` // future predictions
	Metadata    map[string]interface{} `json:"metadata"`
}

// DeploymentOutcome represents the outcome of a deployment for learning
type DeploymentOutcome struct {
	DeploymentID string                 `json:"deployment_id"` // deployment identifier
	Success      bool                   `json:"success"`       // whether deployment succeeded
	Duration     int64                  `json:"duration"`      // deployment duration in seconds
	Issues       []DeploymentIssue      `json:"issues"`        // issues encountered
	Metrics      map[string]interface{} `json:"metrics"`       // deployment metrics
	Context      map[string]interface{} `json:"context"`       // deployment context
	Metadata     map[string]interface{} `json:"metadata"`
}

// DeploymentIssue represents an issue encountered during deployment
type DeploymentIssue struct {
	Type        string                 `json:"type"`        // issue type
	Description string                 `json:"description"` // issue description
	Severity    string                 `json:"severity"`    // issue severity
	Resolution  string                 `json:"resolution"`  // how it was resolved
	Metadata    map[string]interface{} `json:"metadata"`
}

// *** POLICY TYPES ***

// PolicyEvaluationRequest represents a request for policy evaluation
type PolicyEvaluationRequest struct {
	ApplicationID string                 `json:"application_id"` // application being evaluated
	EnvironmentID string                 `json:"environment_id"` // target environment
	Action        string                 `json:"action"`         // action being performed
	Context       map[string]interface{} `json:"context"`        // evaluation context
	Metadata      map[string]interface{} `json:"metadata"`
}

// PolicyEvaluation represents the result of policy evaluation
type PolicyEvaluation struct {
	Compliant   bool                   `json:"compliant"`   // whether the action is compliant
	Violations  []PolicyViolation      `json:"violations"`  // policy violations found
	Warnings    []PolicyWarning        `json:"warnings"`    // policy warnings
	Suggestions []string               `json:"suggestions"` // suggestions for compliance
	Metadata    map[string]interface{} `json:"metadata"`
}

// PolicyViolation represents a policy violation
type PolicyViolation struct {
	Policy      string `json:"policy"`      // policy that was violated
	Reason      string `json:"reason"`      // reason for violation
	Severity    string `json:"severity"`    // violation severity
	Remediation string `json:"remediation"` // suggested remediation
}

// PolicyWarning represents a policy warning
type PolicyWarning struct {
	Policy  string `json:"policy"`  // policy that generated warning
	Message string `json:"message"` // warning message
	Impact  string `json:"impact"`  // potential impact
}

// *** LEGACY COMPATIBILITY TYPES ***
// These types maintain compatibility with existing ai_brain.go patterns

// PlanningRequest represents a request for deployment planning (legacy)
type PlanningRequest struct {
	Intent        string                 `json:"intent"`
	ApplicationID string                 `json:"application_id"`
	EdgeTypes     []string               `json:"edge_types"`
	Context       *PlanningContext       `json:"context"`
	Metadata      map[string]interface{} `json:"metadata"`
}

// PlanningResponse represents the response from deployment planning (legacy)
type PlanningResponse struct {
	Plan       *DeploymentPlan        `json:"plan"`
	Confidence float64                `json:"confidence"`
	Metadata   map[string]interface{} `json:"metadata"`
}

// PlanningContext represents context for deployment planning (legacy)
type PlanningContext struct {
	TargetNodes   []*Node                `json:"target_nodes"`
	RelatedNodes  []*Node                `json:"related_nodes"`
	Edges         []*Edge                `json:"edges"`
	PolicyContext map[string]interface{} `json:"policy_context"`
	EnvironmentID string                 `json:"environment_id"`
}

// Node represents a graph node (legacy compatibility)
type Node struct {
	ID       string                 `json:"id"`
	Kind     string                 `json:"kind"`
	Metadata map[string]interface{} `json:"metadata"`
	Spec     map[string]interface{} `json:"spec"`
}

// Edge represents a graph edge (legacy compatibility)
type Edge struct {
	To       string                 `json:"to"`
	Type     string                 `json:"type"`
	Metadata map[string]interface{} `json:"metadata"`
}

// ImpactAnalysisRequest represents a request for impact analysis (legacy)
type ImpactAnalysisRequest struct {
	Changes     []ProposedChange       `json:"changes"`
	Scope       string                 `json:"scope"`
	Environment string                 `json:"environment"`
	Timeframe   string                 `json:"timeframe"`
	Metadata    map[string]interface{} `json:"metadata"`
}
